部分flask配置相关信息(pycharm不会提示或提示过少)

python文件

flask基础配置
1.Flask类方法
config.from_object(参数):加载flask使用的配置数据,该参数为配置数据存放的python文件
register_blueprint(参数):加载使用的蓝图中注册的url视图函数,该参数为蓝图类生成的对象

2.SQLAlchemy类方法
init_app(参数):提供Flask类产生的app对象,相当与将该类功能加载到flask中

3.Mail
init_app(参数):提供Flask类产生的app对象,相当与将该类功能加载到flask中

4.Migrate
init_app(参数):提供Flask类产生的app对象和db对象,相当与将该类功能加载到flask中
(注:init_app方法也有替代方法即在产生类对象时,将这些参数传入)

数据库配置(一般存放在配置文件中)[这是mysql配置]
HOSTNAME="mysql数据库服务器地址"(本机可以用localhost)
PORT=mysql数据库主机端口号(一般是3306)
USERNAME="mysql数据库的超级管理员用户名"(一般是root)
PASSWORD="mysql数据库的密码"
DATABASE="数据库名"(最后创建的数据库名中的字母均为小写)
CHARSET="数据库使用的编码集"(要与创建的数据库使用的编码集一致)
(下行配置app相关的数据库,格式固定,使用fstring字符串)[flask只读取该行语句,上面的数据库配置的作用是完善该行语句]
app.config["SQLALCHEMY_DATABASE_URI"]=(f"mysql+pymysql://{USERNAME}:{PASSWORD}@{HOSTNAME}:"
                                       f"{PORT}/{DATABASE}?charset={CHARSET}")

邮箱配置
授权码:BUBOMWYABIVFNYJJ(邮箱开启smtp第三方服务时获得[在第三方程序登录时该授权码相当与邮箱密码,请谨慎保管])
flask中邮箱配置通用模板(下面配置flask均会读取)
MAIL_SERVER="使用的邮箱服务器"(网易126邮箱的服务器为:smtp.126.com)
MAIL_USE_SSL=True
MAIL_PORT=使用的邮箱服务器端口(网易邮箱服务器的端口之一是465)
MAIL_USERNAME="使用的邮箱账号"
MAIL_PASSWORD="使用的邮箱账号对应的授权码"(开启smtp服务时获取)
MAIL_DEFAULT_SENDER="使用的邮箱账号"(与登录的邮箱账号要相同)

验证表单配置(使用wtforms模块)[flask有对应改良拓展flask-wtf模块,后续可能会代替wtforms模块使用]
注:几乎所有wtforms模块中的表单字段都支持如下参数
validators参数:一般是列表,可以存放多个验证器
验证器(均支持message参数,指定验证失败后产生指定消息在控制台上打印):
注:使用wtforms模块产生的表单验证类有个特点,属性名要与对应提交的前端表单中输入数据的标签中设置的name属性的名字一样,
若提交的表单中某个输入标签的name属性不在验证类的属性中,则该数据不参与验证,而若验证类属性在提交的待验表单中没有找到
对应name属性的输入标签的输入数据则默认为验证失败

注:验证类对象一般使用validate()方法进行验证,该函数返回布尔类型,调用该函数时,验证类的所有属性均会开始各自的验证,
此外属性名验证完后类会将定义的validate_[类中存在的某一个属性名](self,field)全部执行一遍(相当于自定义的二次认证)
(自定义的函数必须要按照上面格式写才会被自动执行,属性验证失败则使validate()返回False但自定义函数的验证结果是由自己
编写[一般使用raise语句主动报错])(field参数是类执行函数时按照函数名中指定的属性名将该属性对象传入,
该参数可以使用data属性获取值待验证的值)

数据库表类配置(一般数据库表类创建任意多个字段,一个主键字段,可以定义一个或多个外键)
注:在python中创建的表类在数据库中创建该表时字母均为小写(使用ORM映射技术)
1.类属性
__tablename__:指定创建表的表名

使用到的函数(主要描述以映射到数据库后的作用)
1.db.Column(表字段类,详细功能参数):在表中创建一个字段

可用的表字段类类
db.Integer:指定创键的字段为整型(SQL:int)
db.String(number):指定创建的字段为str类型(number的范围在[0,255])(SQL:varchar(number))
db.Text:指定创建的字段为str类型但支持更大范围的数据(存放文本)
db.DateTime:指定创建的字段存放日期时间(一般使用python的datetime模块的datetime类的now方法)

详细功能参数
primary_key:指定该字段是否为主键(一张表仅能有一个主键)[主键必填,一般数据库表中设置一个id字段作为主键]
autoincrement:指定该字段是否自动增长(之后该字段初始值由程序自动分配不用赋值并且程序也会控制它自动增加值)
nullable:指定该字段是否可以为NULL(空)
unique:指定该字段的每个值均唯一
default:指定默认调用函数名
db.ForeignKey(参数):指定该字段为外键(可以被其他表引用)[一般该键用于存放指向该表的关联字段值的字段值,该参数为指向该表的关联字段名,
传参方式为:表名.关联的字段名(表名和字段名均以数据库中为标准[字母全部小写])]

2.db.relationship(数据库表类,详细功能参数):配合外键字段创建一个属性,指向外键的另一个表相关类的对象可以通过该属性使用外键所在表的所有关联数据
[该函数一般与db.ForeignKey(参数)成对出现,因为获取外键所在数据的过程它们都要起作用,比如外键存放关联字段id对应的数据对象使用该关联属性名,
会获取外键所在表中中所有存放相同关联字段id值的外键所在的行数据]
注:(数据库表类参数传的是python中创建的数据库表类,不是数据库中的表类)

详细功能参数
backref:指定创建的关联属性名,支持两种方式指定属性名
方式一:直接指定属性名(字符串)

方式二:使用SQLAlchemy类对象的backref方法(backref(属性名,order_by),属性名用于指定创建的关联属性名,
order_by用与指定通过关联属性名获取到数据的排列方式,比如:order_by=表类中某个属性字段名.desc(),
表示将排列的数据一该字段为标准进行降序排列)[一般表类中某个属性字段名为外键所在表的某个可排列的属性名]


数据库迁移相关的cmd命令(下载flask-migrate拓展创建了Mirage类的对象并传入Flask类对象app后即可在cmd运行下面的数据库迁移命令)
(注:下面命令均为终端命令,并且要运行下面命令需要在flask程序中创建Migrate对象)
flask db init:初始化迁移配置,生成相关迁移文件群(辅助数据库迁移,会在指定目录下产生一个文件夹migrations)
flask db migrate:以创建的flask程序中创建的表字段结构为基础生成相关python脚本文件
(该文件用于提交给数据库生成相应的表字段,此外生成的脚本会存放在生成的文件夹中,可用于数据库表的版本回退
[使用之前数据库迁移产生的脚本文件生成的表])
flask db upgrade:将flask db migrate生成的python文件提交给数据库来更新数据库中该表的字段信息

注:flask db init在相同flask程序中只用创建一次(主要是生成脚本提交程序和日志文件以及其他脚本迁移相关配置文件),
之后该程序中表字段更新并提交给数据库等操作均只需执行flask db migrate和flask db upgrade命令即可

注:flask db migrate在产生数据库更新脚本文件时会对创建的python数据库表类进行检查(发现有错误则不会产生脚本并报错)

注:高版本的flask db init 在执行时会自动执行一次数据库(产生临时脚本并提交然后删除该脚本)表单更新

session密钥配置(放置在flask配置文件中)
SECRET_KEY='任意长的自定义字符串'(注:字符串越复杂,密钥安全性越高,但程序解密时花费的时间就越长)

注:flask模块中url_for(参数):生成一个指定的url或文件路径
生成url时有两种生成方式
方式一(通用):根据url规则生成url
方式二(flask自己的视图函数才能用):
1.非蓝图对象的视图函数:视图函数名(字符串格式)
2.蓝图对象的视图函数:蓝图对象的蓝图名[生成蓝图对象时通过指定name参数设置,一般与蓝图文件同名].蓝图下定义的视图函数名(字符串格式)

生成文件路径时url_for使用方式为url_for(参数,filename)
作用是将参数与filename指定数据按照前端可使用的文件路径格式拼接
(注:前端可用的文件格式:前一级文件夹与后一级夹之间以"/"符号连接)

前端html文件(存放在templates文件夹中)[默认只能放在该文件夹下]

url_for(参数):与flask中的url_for函数一样

注:flask传到前端的自定义类对象使用对象的数据仍然是.引用,但python的字典对象传到前端使用键对应的值的使用方式为对象.键,这点要注意